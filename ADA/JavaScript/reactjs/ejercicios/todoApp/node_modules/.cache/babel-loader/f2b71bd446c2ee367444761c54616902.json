{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { AuthContext } from \"../../contexts/AuthProvider\";\nimport { firebaseAuth } from '../../utils';\nimport { useState, useEffect, useContext } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    isAuthenticated,\n    setIsAuthenticated\n  } = useContext(AuthContext);\n  const [user, setUser] = useState({});\n  const [authMsgError, setAuthMsgError] = useState(null);\n  const history = useHistory();\n\n  const login = async ({\n    email,\n    password\n  }) => {\n    return await firebaseAuth.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      setUser(user);\n      setIsAuthenticated(true);\n      localStorage.setItem('userToken', user.refreshToken);\n      history.go(0);\n    }).catch(e => {\n      switch (e.code) {\n        case \"auth/invalid-email\":\n          setAuthMsgError('Formato de email incorrecto');\n          break;\n\n        case \"auth/weak-password\":\n          setAuthMsgError('La contraseña debe tener 6 caracteres o más');\n          break;\n\n        case \"auth/wrong-password\":\n          setAuthMsgError('La contraseña es incorrecta o el usuario no está registrado');\n          break;\n      }\n    });\n  };\n\n  const register = async ({\n    email,\n    password,\n    fullName\n  }) => {\n    return await firebaseAuth.auth().createUserWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      setUser(user);\n      user.updateProfile({\n        displayName: fullName\n      });\n    }).catch(e => {\n      switch (e.code) {\n        case \"auth/invalid-email\":\n          setAuthMsgError('Formato de email incorrecto');\n          break;\n\n        case \"auth/weak-password\":\n          setAuthMsgError('La contraseña debe tener 6 caracteres o más');\n          break;\n      }\n    });\n  };\n\n  const logout = () => {\n    firebaseAuth.auth().signOut().then(() => {\n      alert('Te has deslogueado exitosamente');\n      history.push('/');\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    firebaseAuth.auth().onAuthStateChanged(user => {\n      console.log(user);\n      const token = localStorage.getItem('userToken');\n      if (token && token === user.refreshToken) setIsAuthenticated(true);\n    });\n  }, [isAuthenticated]);\n  return {\n    login,\n    register,\n    logout,\n    user,\n    isAuthenticated,\n    authMsgError\n  };\n};\n\n_s(useAuth, \"LuS6YMvD2C/VWD9pYqD3wpPLiu8=\", false, function () {\n  return [useHistory];\n});\n\nexport { useAuth };","map":{"version":3,"sources":["C:/Users/ivana.yegros.kubicka/Documents/miRepo/ADA/JavaScript/reactjs/ejercicios/todoApp/src/hooks/useAuth/index.js"],"names":["AuthContext","firebaseAuth","useState","useEffect","useContext","useHistory","useAuth","isAuthenticated","setIsAuthenticated","user","setUser","authMsgError","setAuthMsgError","history","login","email","password","auth","signInWithEmailAndPassword","then","localStorage","setItem","refreshToken","go","catch","e","code","register","fullName","createUserWithEmailAndPassword","updateProfile","displayName","logout","signOut","alert","push","error","console","log","onAuthStateChanged","token","getItem"],"mappings":"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","sourcesContent":["import { AuthContext } from \"../../contexts/AuthProvider\"\r\nimport { firebaseAuth } from '../../utils'\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst useAuth = () => {\r\n    const { isAuthenticated, setIsAuthenticated } = useContext(AuthContext)\r\n    const [user, setUser] = useState({})\r\n    const [authMsgError, setAuthMsgError] = useState(null)\r\n    const history = useHistory()\r\n\r\n    const login = async ({ email, password }) => {\r\n        return await firebaseAuth.auth().signInWithEmailAndPassword(email, password)\r\n            .then(({ user }) => {\r\n                setUser(user)\r\n                setIsAuthenticated(true)\r\n                localStorage.setItem('userToken', user.refreshToken)\r\n                history.go(0)\r\n            }).catch(e => {\r\n                switch (e.code) {\r\n                    case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\r\n                        break\r\n                    case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\r\n                        break\r\n                    case \"auth/wrong-password\": setAuthMsgError('La contraseña es incorrecta o el usuario no está registrado')\r\n                        break\r\n                }\r\n            })\r\n    }\r\n\r\n    const register = async ({ email, password, fullName }) => {\r\n        return await firebaseAuth.auth().createUserWithEmailAndPassword(email, password)\r\n            .then(({ user }) => {\r\n                setUser(user)\r\n                user.updateProfile({ displayName: fullName })\r\n            }).catch(e => {\r\n                switch (e.code) {\r\n                    case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\r\n                        break\r\n                    case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\r\n                        break\r\n                }\r\n            })\r\n    }\r\n\r\n    const logout = () => {\r\n        firebaseAuth.auth().signOut()\r\n            .then(() => {\r\n                alert('Te has deslogueado exitosamente')\r\n                history.push('/')\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        firebaseAuth.auth().onAuthStateChanged((user) => {\r\n            console.log(user)\r\n            const token = localStorage.getItem('userToken');\r\n            if (token && token === user.refreshToken)\r\n                setIsAuthenticated(true)\r\n        })\r\n    }, [isAuthenticated]);\r\n\r\n    return { login, register, logout, user, isAuthenticated, authMsgError }\r\n}\r\nexport { useAuth }"]},"metadata":{},"sourceType":"module"}