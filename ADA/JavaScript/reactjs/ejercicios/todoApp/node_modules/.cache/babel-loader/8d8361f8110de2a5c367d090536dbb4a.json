{"ast":null,"code":"// // import { AuthContext } from \"../../contexts/AuthProvider\"\n// import { useState, useEffect, useContext } from 'react';\n// import { useHistory } from \"react-router-dom\"\n// const useAuth = () => {\n//     const { isAuthenticated, setIsAuthenticated } = useContext(AuthContext)\n//     const [user, setUser] = useState({})\n//     const [authMsgError, setAuthMsgError] = useState(null)\n//     const history = useHistory()\n//     const login = async ({ email, password }) => {\n//         return await firebaseAuth.auth().signInWithEmailAndPassword(email, password)\n//             .then(({ user }) => {\n//                 setUser(user)\n//                 setIsAuthenticated(true)\n//                 localStorage.setItem('userToken', user.refreshToken)\n//                 history.go(0)\n//             }).catch(e => {\n//                 switch (e.code) {\n//                     case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\n//                         break\n//                     case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\n//                         break\n//                     case \"auth/wrong-password\": setAuthMsgError('La contraseña es incorrecta o el usuario no está registrado')\n//                         break\n//                 }\n//             })\n//     }\n//     const register = async ({ email, password, fullName }) => {\n//         return await firebaseAuth.auth().createUserWithEmailAndPassword(email, password)\n//             .then(({ user }) => {\n//                 setUser(user)\n//                 user.updateProfile({ displayName: fullName })\n//             }).catch(e => {\n//                 switch (e.code) {\n//                     case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\n//                         break\n//                     case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\n//                         break\n//                 }\n//             })\n//     }\n//     const logout = () => {\n//         firebaseAuth.auth().signOut()\n//             .then(() => {\n//                 alert('Te has deslogueado exitosamente')\n//                 history.push('/')\n//             }).catch((error) => {\n//                 console.log(error)\n//             })\n//     }\n//     useEffect(() => {\n//         firebaseAuth.auth().onAuthStateChanged((user) => {\n//             console.log(user)\n//             const token = localStorage.getItem('userToken');\n//             if (token && token === user.refreshToken)\n//                 setIsAuthenticated(true)\n//         })\n//     }, [isAuthenticated]);\n//     return { login, register, logout, user, isAuthenticated, authMsgError }\n// }\n// export { useAuth }","map":{"version":3,"sources":["C:/Users/ivana.yegros.kubicka/Documents/miRepo/ADA/JavaScript/reactjs/ejercicios/todoApp/src/hooks/useAuth/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// // import { AuthContext } from \"../../contexts/AuthProvider\"\r\n// import { useState, useEffect, useContext } from 'react';\r\n// import { useHistory } from \"react-router-dom\"\r\n\r\n// const useAuth = () => {\r\n//     const { isAuthenticated, setIsAuthenticated } = useContext(AuthContext)\r\n//     const [user, setUser] = useState({})\r\n//     const [authMsgError, setAuthMsgError] = useState(null)\r\n//     const history = useHistory()\r\n\r\n//     const login = async ({ email, password }) => {\r\n//         return await firebaseAuth.auth().signInWithEmailAndPassword(email, password)\r\n//             .then(({ user }) => {\r\n//                 setUser(user)\r\n//                 setIsAuthenticated(true)\r\n//                 localStorage.setItem('userToken', user.refreshToken)\r\n//                 history.go(0)\r\n//             }).catch(e => {\r\n//                 switch (e.code) {\r\n//                     case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\r\n//                         break\r\n//                     case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\r\n//                         break\r\n//                     case \"auth/wrong-password\": setAuthMsgError('La contraseña es incorrecta o el usuario no está registrado')\r\n//                         break\r\n//                 }\r\n//             })\r\n//     }\r\n\r\n//     const register = async ({ email, password, fullName }) => {\r\n//         return await firebaseAuth.auth().createUserWithEmailAndPassword(email, password)\r\n//             .then(({ user }) => {\r\n//                 setUser(user)\r\n//                 user.updateProfile({ displayName: fullName })\r\n//             }).catch(e => {\r\n//                 switch (e.code) {\r\n//                     case \"auth/invalid-email\": setAuthMsgError('Formato de email incorrecto')\r\n//                         break\r\n//                     case \"auth/weak-password\": setAuthMsgError('La contraseña debe tener 6 caracteres o más')\r\n//                         break\r\n//                 }\r\n//             })\r\n//     }\r\n\r\n//     const logout = () => {\r\n//         firebaseAuth.auth().signOut()\r\n//             .then(() => {\r\n//                 alert('Te has deslogueado exitosamente')\r\n//                 history.push('/')\r\n//             }).catch((error) => {\r\n//                 console.log(error)\r\n//             })\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         firebaseAuth.auth().onAuthStateChanged((user) => {\r\n//             console.log(user)\r\n//             const token = localStorage.getItem('userToken');\r\n//             if (token && token === user.refreshToken)\r\n//                 setIsAuthenticated(true)\r\n//         })\r\n//     }, [isAuthenticated]);\r\n\r\n//     return { login, register, logout, user, isAuthenticated, authMsgError }\r\n// }\r\n// export { useAuth }"]},"metadata":{},"sourceType":"module"}